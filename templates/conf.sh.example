#!/usr/bin/env bash
set -e -o pipefail

# settings for docker build, run and exec

main() {
    SCRIPTDIR=$(cd $(dirname $BASH_SOURCE[0]) && pwd)
    source $SCRIPTDIR/dscripts/conf_lib.sh  # load library functions
    # do_not_build $@
    init_sudo
    set_volume_root
    set_image_and_container_name
    set_users
    set_buildargs
    set_run_args
    set_network
    set_vol_mapping
    #enable_x11_client
    #enable_pkcs11
    #set_enable_sshd     # usually used only for debugging - requires installed sshd in image
}


set_volume_root() {
    DOCKERVOL_SHORT='/dv'
    DOCKERLOG_SHORT='/dl'
    if [ "$TRAVIS" == "true" ]; then
        DOCKERVOL_SHORT='./dv';
        DOCKERLOG_SHORT='./dl';
    fi
    #DOCKER_VOLUME_ROOT='/var/lib/docker/volumes'  # hard coded - check for your config if applicable!
}


set_image_and_container_name() {
    # This IMGID qualifies image, container, user and IP adddress; this is helpful for managing
    # processes on the docker host etc.
    IMGID='99'  # range from 02 .. 99; must be unique per node (registered in github.com/identinetics/dscripts/templates/assigned-uids.adoc)
    PROJSHORT='template'
    set_staging_env
    export IMAGENAME="r2h2/${PROJSHORT}"  # you may or may not want to have an image id and/or staging tag
    #export IMAGENAME="r2h2/${PROJSHORT}${IMGID}:${STAGING_ENV}"  # [a-z_0-9]
    export CONTAINERNAME="${IMGID}${PROJSHORT}"
    #export CONTAINERNAME="${IMGID}${PROJSHORT}-${STAGING_ENV}"
    export DOCKER_REGISTRY='index.docker.io'
}


set_users() {
    export CONTAINERUSER="$PROJSHORT${IMGID}"   # group and user to run container
    export CONTAINERUID="3430${IMGID}"     # gid and uid for CONTAINERUSER
    export START_AS_ROOT=      # 'True' (e.g. for apache to fall back to www user)
}


set_buildargs() {
    export BUILDARGS="
        --build-arg USERNAME=$CONTAINERUSER
        --build-arg UID=$CONTAINERUID
    "
}


set_run_args() {
    export ENVSETTINGS="
        -e LOGDIR=/var/log
        -e LOGPURGEFILES='/var/log/httpd/* /var/log/shibboleth/*'
        -e LOGLEVEL=INFO
    "
    get_capabilities
    export STARTCMD='/start.sh'  # unset or blank to use image default
}


set_network() {
    # The docker0 bridge has dynamic addresses, whereas a custom bridge allows predictable addresses
    NETWORK=dockernet
    set +e  # errexit off
    $sudo docker network ls | awk '{print $2}' | grep $NETWORK > /dev/null
    if (( $? == 1)); then
        $sudo docker network create --driver bridge --subnet=10.1.1.0/24 \
                  -o com.docker.network.bridge.name=br-$NETWORK $NETWORK
    fi
    export NETWORKSETTINGS="
        --net $NETWORK
        --ip 10.1.1.${IMGID}
        -p 8080:8080
    "
}


set_vol_mapping() {
    # create container user on docker host
    create_user $CONTAINERUSER $CONTAINERUID

    # it is good practice to map each VOLUME from the Dockerfile
    map_docker_volume "${CONTAINERNAME}.var_db" '/var/db' 'Z' $DOCKERVOL_SHORT
    map_docker_volume "${CONTAINERNAME}.var_log" '/var/log' 'Z' $DOCKERLOG_SHORT
	chown -R $CONTAINERUSER:$CONTAINERUSER $DOCKER_VOLUME_ROOT/${CONTAINERNAME}.*

    #export VOLROOT="${DOCKERVOL_SHORT}/$CONTAINERNAME"  # container volumes on docker host
    #map_host_directory "$DOCKERLOG_SHORT/var/log/" '/var/log/' 'Z'
}


set_enable_sshd() {
    export SSHD_ROOTPW='changeit'
    map_docker_volume "${CONTAINERNAME}.ssh" "/etc/ssh" 'Z' $DOCKERLOG_SHORT
    enable_sshd
}


main $@
