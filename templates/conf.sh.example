#!/usr/bin/env bash

# settings for docker build, run and exec

main() {
    SCRIPTDIR=$(cd $(dirname $BASH_SOURCE[0]) && pwd)
    source $SCRIPTDIR/dscripts/conf_lib.sh  # load library functions

    init_sudo
    set_volume_root
    set_image_and_container_name
    set_users
    set_buildargs
    set_run_args
    set_network
    set_vol_mapping
    #enable_x11_client
    #enable_pkcs11
    #set_enable_sshd     # usually used only for debugging - requires installed sshd in image
}


set_volume_root() {
    DOCKERVOL_ROOT='/docker_volumes'
    DOCKERLOG_ROOT='/dl'
    SHAREDDATA_ROOT="${DOCKERVOL_ROOT}/01shared_data"    # data shared between containers
}


set_image_and_container_name() {
    # This IMGID qualifies image, container, user and IP adddress; this is helpful for managing
    # processes on the docker host etc.
    IMGID='99'  # range from 02 .. 99; must be unique per node
    PROJSHORT='template'
    export IMAGENAME="r2h2/$PROJSHORT${IMGID}"  # [a-z_0-9]
    export CONTAINERNAME="${IMGID}$PROJSHORT"
    export DOCKER_REGISTRY='index.docker.io'
}


set_users() {
    export CONTAINERUSER="$PROJSHORT${IMGID}"   # group and user to run container
    export CONTAINERUID="3430${IMGID}"     # gid and uid for CONTAINERUSER
    export SHARED_CONTAINERS_GROUP="sharedcont"   # group shared by other containers
    export SHARED_CONTAINERS_GROUPID="8000"
    export START_AS_ROOT=      # 'True' (e.g. for apache to fall back to www user)
}


set_buildargs() {
    export BUILDARGS="
        --build-arg USERNAME=$CONTAINERUSER
        --build-arg UID=$CONTAINERUID
    "
}


set_run_args() {
    export ENVSETTINGS="
        -e LOGDIR=/var/log
        -e LOGLEVEL=INFO
    "
    get_capabilities
    export STARTCMD='/start.sh'  # unset or blank to use image default
}


set_network() {
    # The docker0 bridge has dynamic addresses, whereas a custom bridge allows predictable addresses
    NETWORK=dockernet
    set +e  # errexit off
    $sudo docker network ls | awk '{print $2}' | grep $NETWORK > /dev/null
    if (( $? == 1)); then
        $sudo docker network create --driver bridge --subnet=10.1.1.0/24 \
                  -o com.docker.network.bridge.name=br-$NETWORK $NETWORK
    fi
    export NETWORKSETTINGS="
        --net $NETWORK
        --ip 10.1.1.${IMGID}
        -p 8080:8080
    "
}


set_vol_mapping() {
    map_docker_volume "${CONTAINERNAME}.db" '/var/db' 'Z' $DOCKERVOL_ROOT
    map_docker_volume "${CONTAINERNAME}.log" '/var/log' 'Z' $DOCKERLOG_ROOT

    #create_user $CONTAINERUSER $CONTAINERUID
    #export VOLROOT="${DOCKERVOL_ROOT}/$CONTAINERNAME"  # container volumes on docker host
    #map_host_directory "$VOLROOT/etc/pki/" '/etc/pki/' 'ro'
    #map_host_directory "$VOLROOT/var/db/" '/var/db/' 'Z'
    #map_host_directory "$DOCKERLOG_ROOT/var/log/" '/var/log/' 'Z'
}


set_enable_sshd() {
    export SSHD_ROOTPW='changeit'
    map_docker_volume "${CONTAINERNAME}.ssh" "/etc/ssh" 'Z' $DOCKERLOG_ROOT
    enable_sshd
}


main
