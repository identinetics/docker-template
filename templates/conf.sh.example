#!/usr/bin/env bash

main() {
    SCRIPTDIR=$(cd $(dirname $BASH_SOURCE[0]) && pwd)
    source $SCRIPTDIR/dscripts/conf_lib.sh  $@         # load library functions
    configlib_version=2  # compatible version of conf_lib.sh
    check_version $configlib_version
    # do_not_build $@ # uncomment this line to pull/load image
    init_sudo
    _set_volume_root
    _set_image_and_container_name
    #_set_image_signature_args
    _set_users
    _set_buildargs
    _set_run_args
    #_set_logfiles
    #enable_x11_client
    #enable_pkcs11
    #set_enable_sshd     # usually used only for debugging - requires installed sshd in image
    [[ -e "$SCRIPTDIR/conf_local.sh" ]] && source $SCRIPTDIR/conf_local.sh
}


_set_volume_root() {
    # DOCKERVOL_SHORT and DOCKERLOG_SHORT are used as
    #  (1) root dirs for volume mappings to the file system, and
    #  (2) as dirs to contain symlinks to docker volumes
    DOCKERVOL_SHORT='./dv'
    DOCKERLOG_SHORT='./dl'
    mkdir -p $DOCKERVOL_SHORT $DOCKERLOG_SHORT
    DOCKER_VOLUME_ROOT='/var/lib/docker/volumes'  # hard coded - check for your config if applicable!
    #DOCKER_VOL_LOG_SYMLINKS_DISABLE='True'  # unset or empty to enable symlink creation
}


_set_image_and_container_name() {
    # imgid qualifies image, container, user and IP adddress; this is helpful for managing
    # processes on the docker host etc.
    imgid='99'  # range from 02 .. 99; must be unique per node (registered in github.com/identinetics/dscripts/templates/assigned-uids.adoc)
    projshort='template'
    export SERVICEDESCRIPTION=service_name  # e.g. www.example.org or ldap://10.1.1.${imgid}:8389"  (no blanks!)
    [[ "$DOCKER_REGISTRY_USER" ]] || export DOCKER_REGISTRY_USER='local'
    export IMAGENAME="${DOCKER_REGISTRY_USER}/${projshort}"
    export CONTAINERNAME="${imgid}${projshort}"
    [[ "$DOCKER_REGISTRY" ]] || export DOCKER_REGISTRY=''  # blank for default registry
}


_set_image_signature_args() {
    export DIDI_SIGNER='tester@testinetics.at'  # PGP uid  - no verification if empty
    export GPG_SIGN_OPTIONS='--default-key B5341047'
}


_set_users() {
    export CONTAINERUSER="$projshort${imgid}"   # group and user to run container
    export CONTAINERUID="3430${imgid}"     # gid and uid for CONTAINERUSER
    #export CONTAINERUSER=$(get_metadata uid)      # user/group defined in Dockerfile
    #export CONTAINERUID=$(get_metadata username)  # uid(gid defined in Dockerfile
    export START_AS_ROOT=      # 'True' (e.g. for apache to fall back to www user)
}


_set_buildargs() {
    export BUILDARGS="
        --build-arg USERNAME=$CONTAINERUSER
        --build-arg UID=$CONTAINERUID
    "
    #export DOCKERFILE_DIR=  # set this if the Docker environment is not in the dscripts submodule's parent directory (-> build will cd there)
    #export DSCRIPTS_DOCKERFILE='Dockerfile.rhel'   # defaults to 'Dockerfile' if unset or empty
    export REPO_STATUS='True'  # if set: generate 'REPO_STATUS' file to be included in docker image at /opt/etc/
    #export SET_BUILDINFO='True'   # if set add label BUILDINFO to image (better be set in CI-pipeline)
    export MANIFEST_SCOPE='local'  # Extension for manifest library. valid values: 'global', 'local'.
                                   # Unset to skip build number generation.
                                   # must be local for targets. Requires write access to git for 'global'.
}


_set_run_args() {
    LOGPURGEFILES='/var/log/httpd/* /var/log/shibboleth/*'
    export ENVSETTINGS="
        -e LOGDIR=/var/log
        -e LOGPURGEFILES
        -e LOGLEVEL=INFO
    "
    export STARTCMD=''  # set to override image default
}


create_intercontainer_network() {
    # Create a local network on the docker host. As the default docker0 bridge has dynamic
    # addresses, a custom bridge is created allowing predictable addresses.
    network='dockernet'
    set +e  # errexit off
    $sudo docker network ls | awk '{print $2}' | grep $network > /dev/null
    if (( $? == 1)); then
        $sudo docker network create --driver bridge --subnet=10.1.1.0/24 \
                  -o com.docker.network.bridge.name=br-$network $network
    fi
    export NETWORKSETTINGS="
        --net $network
        --ip 10.1.1.${imgid}
        -p 8080:8080
    "
}


setup_vol_mapping() {
    # Create docker volume (-> map_docker_volume) or map a host dir (-> map_host_directory)
    # In both cases create a shortcut in the shortcut directory (DOCKERVOL_SHORT, DOCKERLOG_SHORT)
    mode=$1  # create (used by run.sh)/list (used by manage.sh)
    export VOLLIST=''
    export VOLMAPPING=''
    # create container user on docker host (optional - for better process visibility with host tools)
    create_user $CONTAINERUSER $CONTAINERUID

    # Hint: it is good practice to export each VOLUME in the Dockerfile
    map_docker_volume $mode "${CONTAINERNAME}.var_db"  '/var/db'  'Z' $DOCKERVOL_SHORT
    map_docker_volume $mode "${CONTAINERNAME}.var_log" '/var/log' 'Z' $DOCKERLOG_SHORT
    if [[ ! $JENKINS_HOME ]]; then
        $sudo chown -R $CONTAINERUID:$CONTAINERUID $DOCKER_VOLUME_ROOT/$CONTAINERNAME.* 2>/dev/null || true
    fi

    #map_host_directory "$DOCKERLOG_SHORT/var/log/" '/var/log/' 'Z'
}


_set_enable_sshd() {
    export SSHD_ROOTPW='changeit'
    map_docker_volume $mode "${CONTAINERNAME}.ssh" "/etc/ssh" 'Z' $DOCKERLOG_SHORT
    export CAPABILITIES="$CAPABILITIES --cap-add=setuid --cap-add=setgid --cap-add=chown"
    enable_sshd
}


#_set_logfiles() {  # optional: set this for multitail + logfiles subcommands in manage.sh
#    export KNOWN_LOGFILES="
#        ${DOCKERLOG_SHORT}/${CONTAINERNAME}.var_log/xxx.log
#        ${DOCKERLOG_SHORT}/${CONTAINERNAME}.var_log/xxx.error
#    "
#}


container_status() {
    $sudo docker ps | head -1
    $sudo docker ps --all -f name=$CONTAINERNAME | egrep -v ^CONTAINER
    #$sudo docker exec -it $CONTAINERNAME /scripts/status.sh
}


logrotate() {
    find $DOCKERLOG_SHORT/${CONTAINERNAME}.var_log/ -mtime +5 -exec ls -ld {} \;
}


main $@
