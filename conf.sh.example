#!/usr/bin/env bash
# rhoerbe/docker-template@github 2016-07-15

DOCKERVOL_ROOT='/docker_volumes'
# data shared between containers:
SHAREDDATA_ROOT="${DOCKERVOL_ROOT}/01shared_data"

# configure container
export IMGID='99'  # range from 02 .. 99; must be unique
PROJSHORT='template'

export IMAGENAME="r2h2/$PROJSHORT${IMGID}"
export CONTAINERNAME="${IMGID}$PROJSHORT"
export CONTAINERUSER="$PROJSHORT${IMGID}"   # group and user to run container
export CONTAINERUID="80${IMGID}"     # gid and uid for CONTAINERUSER
export SHARED_CONTAINERS_GROUP="sharedcont"   # group shared by other containers
export SHARED_CONTAINERS_GROUPID="8000"
export BUILDARGS="
    --build-arg "USERNAME=$CONTAINERUSER" \
    --build-arg "UID=$CONTAINERUID" \
"
export ENVSETTINGS="
    -e LOGDIR=/var/log
    -e LOGLEVEL=INFO
"

export NETWORKSETTINGS="
    --net dockernet
    --ip 10.1.1.${IMGID}
    -p 8080:8080
"
export VOLROOT="${DOCKERVOL_ROOT}/$CONTAINERNAME"  # container volumes on docker host
export VOLMAPPING="
    -v $VOLROOT/etc/xyz:/etc/xyz:Z
    -v $VOLROOT/var/log:/var/log:Z
    -v $SHAREDDATA_ROOT/$CONTAINERNAME/www:/var/www:Z
"

# How to enable xclients in Docker containers: http://wiki.ros.org/docker/Tutorials/GUI
#export ENVSETTINGS="$ENVSETTINGS
#    -e DISPLAY=$DISPLAY
#"
#export VOLMAPPING="$VOLMAPPING
#    -v /tmp/.X11-unix/:/tmp/.X11-unix:Z
#"

# enable Smartcard Reader in Docker
# mounting var/lock/.., var/run to get around permission problems when starting non-root
# --privileged mapping of usb devices allows a generic configreation without knowing the
# USB device name. Alternativel, devices can be mapped using '--device'
#export VOLMAPPING="$VOLMAPPING
#    --privileged -v /dev/bus/usb:/dev/bus/usb
#"

export STARTCMD='/start.sh'
export START_AS_ROOT=      # start as root (e.g. for apache to fall back to www user)

# first start: create user/group/host directories
if [ $(id -u) -ne 0 ]; then
    sudo="sudo"
fi
if ! id -u $CONTAINERUSER &>/dev/null; then
    case ${OSTYPE//[0-9.]/} in
        darwin) # OSX
            $sudo sudo dseditgroup -o create -i $CONTAINERUID $CONTAINERUSER
            $sudo dscl . create /Users/$CONTAINERUSER UniqueID $CONTAINERUID
            $sudo dscl . create /Users/$CONTAINERUSER PrimaryGroupID $CONTAINERUID
            ;;
        linux-gnu) #CentOs
            $sudo groupadd -g $CONTAINERUID $CONTAINERUSER
            $sudo adduser -M --gid $CONTAINERUID --comment "" --uid $CONTAINERUID $CONTAINERUSER
            ;;
        linux)  #Debian
            $sudo groupadd -g $CONTAINERUID $CONTAINERUSER
            $sudo adduser --gid $CONTAINERUID --no-create-home --disabled-password --gecos "" --uid $CONTAINERUID $CONTAINERUSER
            ;;
        *)
            echo "do not know how to add user/group for OS ${OSTYPE}"
            ;;
    esac
fi


#    $sudo adduser --gid $CONTAINERUID --disabled-password --gecos "" --uid $CONTAINERUID $CONTAINERUSER #Debian

function chkdir {
    dir=$1; user=$2
    $sudo mkdir -p "$VOLROOT/$dir"
    $sudo chown -R $user:$user "$VOLROOT/$dir"
}

# create if not existing and set owner for path on docker host relative to $VOLROOT
chkdir etc/xyz $CONTAINERUSER
chkdir var/log $CONTAINERUSER

$sudo mkdir -p $SHAREDDATA_ROOT/$CONTAINERNAME/www/
$sudo chown -R $CONTAINERUSER:$SHARED_CONTAINERS_GROUP $SHAREDDATA_ROOT/$CONTAINERNAME/www/

# create dir $1 with given user $2if not existing, relative to $4; set/repair ownership
# arg 1: dir, arg 2: user; arg 3: group (defaults to user); arg 4: vol root (defaults to $VOLROOT)
#function chkdir_complex() {
#    dir=$1; user=$2; group=${3:-$user}; volroot=${4:-$VOLROOT}
#    #echo "check $volroot/$dir owned by $user:$group"
#    $sudo mkdir -p "$volroot/$dir"
#    $sudo chown -R $user:$group "$volroot/$dir"
#}

#chkdir_complex $CONTAINERNAME/www $CONTAINERUSER $SHARED_CONTAINERS_GROUP $SHAREDDATA_ROOT

# add settings to start sshd (for remote debugging)
#export NETWORKSETTINGS="$NETWORKSETTINGS -p 2022:2022"
#export VOLMAPPING="$VOLMAPPING -v $VOLROOT/opt/ssh:/opt/ssh:Z"


